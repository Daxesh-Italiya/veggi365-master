// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:veggi/core/models/basket_entity.dart';
import 'package:veggi/generated/json/basket_entity_helper.dart';
import 'package:veggi/core/models/cab_storage_entity.dart';
import 'package:veggi/generated/json/cab_storage_entity_helper.dart';
import 'package:veggi/core/models/order_response_entity.dart';
import 'package:veggi/generated/json/order_response_entity_helper.dart';
import 'package:veggi/core/models/user_response_entity.dart';
import 'package:veggi/generated/json/user_response_entity_helper.dart';
import 'package:veggi/core/models/order_payment_response_entity.dart';
import 'package:veggi/generated/json/order_payment_response_entity_helper.dart';
import 'package:veggi/core/models/cart_products_entity.dart';
import 'package:veggi/generated/json/cart_products_entity_helper.dart';
import 'package:veggi/core/models/cab_order_response_entity.dart';
import 'package:veggi/generated/json/cab_order_response_entity_helper.dart';
import 'package:veggi/core/models/address_response_entity.dart';
import 'package:veggi/generated/json/address_response_entity_helper.dart';
import 'package:veggi/core/models/sign_up_response_entity.dart';
import 'package:veggi/generated/json/sign_up_response_entity_helper.dart';
import 'package:veggi/core/models/order_product_response_entity.dart';
import 'package:veggi/generated/json/order_product_response_entity_helper.dart';
import 'package:veggi/core/models/pin_code_entity.dart';
import 'package:veggi/generated/json/pin_code_entity_helper.dart';
import 'package:veggi/core/models/product_entity.dart';
import 'package:veggi/generated/json/product_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case BasketEntity:
				return basketEntityFromJson(data as BasketEntity, json) as T;
			case CabStorageEntity:
				return cabStorageEntityFromJson(data as CabStorageEntity, json) as T;
			case OrderResponseEntity:
				return orderResponseEntityFromJson(data as OrderResponseEntity, json) as T;
			case Order:
				return orderFromJson(data as Order, json) as T;
			case UserResponseEntity:
				return userResponseEntityFromJson(data as UserResponseEntity, json) as T;
			case OrderPaymentResponseEntity:
				return orderPaymentResponseEntityFromJson(data as OrderPaymentResponseEntity, json) as T;
			case OrderPaymentResponsePayment:
				return orderPaymentResponsePaymentFromJson(data as OrderPaymentResponsePayment, json) as T;
			case CartProductsEntity:
				return cartProductsEntityFromJson(data as CartProductsEntity, json) as T;
			case CabOrderResponseEntity:
				return cabOrderResponseEntityFromJson(data as CabOrderResponseEntity, json) as T;
			case CabOrder:
				return cabOrderFromJson(data as CabOrder, json) as T;
			case AddressResponseEntity:
				return addressResponseEntityFromJson(data as AddressResponseEntity, json) as T;
			case Address:
				return addressFromJson(data as Address, json) as T;
			case SignUpResponseEntity:
				return signUpResponseEntityFromJson(data as SignUpResponseEntity, json) as T;
			case OrderProduct:
				return orderProductFromJson(data as OrderProduct, json) as T;
			case PinCodeEntity:
				return pinCodeEntityFromJson(data as PinCodeEntity, json) as T;
			case ProductEntity:
				return productEntityFromJson(data as ProductEntity, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case BasketEntity:
				return basketEntityToJson(data as BasketEntity);
			case CabStorageEntity:
				return cabStorageEntityToJson(data as CabStorageEntity);
			case OrderResponseEntity:
				return orderResponseEntityToJson(data as OrderResponseEntity);
			case Order:
				return orderToJson(data as Order);
			case UserResponseEntity:
				return userResponseEntityToJson(data as UserResponseEntity);
			case OrderPaymentResponseEntity:
				return orderPaymentResponseEntityToJson(data as OrderPaymentResponseEntity);
			case OrderPaymentResponsePayment:
				return orderPaymentResponsePaymentToJson(data as OrderPaymentResponsePayment);
			case CartProductsEntity:
				return cartProductsEntityToJson(data as CartProductsEntity);
			case CabOrderResponseEntity:
				return cabOrderResponseEntityToJson(data as CabOrderResponseEntity);
			case CabOrder:
				return cabOrderToJson(data as CabOrder);
			case AddressResponseEntity:
				return addressResponseEntityToJson(data as AddressResponseEntity);
			case Address:
				return addressToJson(data as Address);
			case SignUpResponseEntity:
				return signUpResponseEntityToJson(data as SignUpResponseEntity);
			case OrderProduct:
				return orderProductToJson(data as OrderProduct);
			case PinCodeEntity:
				return pinCodeEntityToJson(data as PinCodeEntity);
			case ProductEntity:
				return productEntityToJson(data as ProductEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (BasketEntity).toString()){
			return BasketEntity().fromJson(json);
		}
		if(type == (CabStorageEntity).toString()){
			return CabStorageEntity().fromJson(json);
		}
		if(type == (OrderResponseEntity).toString()){
			return OrderResponseEntity().fromJson(json);
		}
		if(type == (Order).toString()){
			return Order().fromJson(json);
		}
		if(type == (UserResponseEntity).toString()){
			return UserResponseEntity().fromJson(json);
		}
		if(type == (OrderPaymentResponseEntity).toString()){
			return OrderPaymentResponseEntity().fromJson(json);
		}
		if(type == (OrderPaymentResponsePayment).toString()){
			return OrderPaymentResponsePayment().fromJson(json);
		}
		if(type == (CartProductsEntity).toString()){
			return CartProductsEntity().fromJson(json);
		}
		if(type == (CabOrderResponseEntity).toString()){
			return CabOrderResponseEntity().fromJson(json);
		}
		if(type == (CabOrder).toString()){
			return CabOrder().fromJson(json);
		}
		if(type == (AddressResponseEntity).toString()){
			return AddressResponseEntity().fromJson(json);
		}
		if(type == (Address).toString()){
			return Address().fromJson(json);
		}
		if(type == (SignUpResponseEntity).toString()){
			return SignUpResponseEntity().fromJson(json);
		}
		if(type == (OrderProduct).toString()){
			return OrderProduct().fromJson(json);
		}
		if(type == (PinCodeEntity).toString()){
			return PinCodeEntity().fromJson(json);
		}
		if(type == (ProductEntity).toString()){
			return ProductEntity().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<BasketEntity>[] is M){
			return data.map<BasketEntity>((e) => BasketEntity().fromJson(e)).toList() as M;
		}
		if(<CabStorageEntity>[] is M){
			return data.map<CabStorageEntity>((e) => CabStorageEntity().fromJson(e)).toList() as M;
		}
		if(<OrderResponseEntity>[] is M){
			return data.map<OrderResponseEntity>((e) => OrderResponseEntity().fromJson(e)).toList() as M;
		}
		if(<Order>[] is M){
			return data.map<Order>((e) => Order().fromJson(e)).toList() as M;
		}
		if(<UserResponseEntity>[] is M){
			return data.map<UserResponseEntity>((e) => UserResponseEntity().fromJson(e)).toList() as M;
		}
		if(<OrderPaymentResponseEntity>[] is M){
			return data.map<OrderPaymentResponseEntity>((e) => OrderPaymentResponseEntity().fromJson(e)).toList() as M;
		}
		if(<OrderPaymentResponsePayment>[] is M){
			return data.map<OrderPaymentResponsePayment>((e) => OrderPaymentResponsePayment().fromJson(e)).toList() as M;
		}
		if(<CartProductsEntity>[] is M){
			return data.map<CartProductsEntity>((e) => CartProductsEntity().fromJson(e)).toList() as M;
		}
		if(<CabOrderResponseEntity>[] is M){
			return data.map<CabOrderResponseEntity>((e) => CabOrderResponseEntity().fromJson(e)).toList() as M;
		}
		if(<CabOrder>[] is M){
			return data.map<CabOrder>((e) => CabOrder().fromJson(e)).toList() as M;
		}
		if(<AddressResponseEntity>[] is M){
			return data.map<AddressResponseEntity>((e) => AddressResponseEntity().fromJson(e)).toList() as M;
		}
		if(<Address>[] is M){
			return data.map<Address>((e) => Address().fromJson(e)).toList() as M;
		}
		if(<SignUpResponseEntity>[] is M){
			return data.map<SignUpResponseEntity>((e) => SignUpResponseEntity().fromJson(e)).toList() as M;
		}
		if(<OrderProduct>[] is M){
			return data.map<OrderProduct>((e) => OrderProduct().fromJson(e)).toList() as M;
		}
		if(<PinCodeEntity>[] is M){
			return data.map<PinCodeEntity>((e) => PinCodeEntity().fromJson(e)).toList() as M;
		}
		if(<ProductEntity>[] is M){
			return data.map<ProductEntity>((e) => ProductEntity().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}